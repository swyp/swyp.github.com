<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/swypConnectionSession.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/swypConnectionSession</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>swypConnectionSession.h</DeclaredIn>
			
			<NodeRef refid="9"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/swypConnectionSession/initiate</TokenIdentifier>
			<Abstract type="html">Start connection; schedule in runloop</Abstract>
			<DeclaredIn>swypConnectionSession.h</DeclaredIn>			
			
			<Declaration>- (void)initiate</Declaration>
			
			
			<Anchor>//api/name/initiate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/swypConnectionSession/invalidate</TokenIdentifier>
			<Abstract type="html">Destroy connection; remove from runloop</Abstract>
			<DeclaredIn>swypConnectionSession.h</DeclaredIn>			
			
			<Declaration>- (void)invalidate</Declaration>
			
			
			<Anchor>//api/name/invalidate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/swypConnectionSession/beginSendingFileStreamWithTag:type:dataStreamForSend:length:</TokenIdentifier>
			<Abstract type="html">the length of the 'stream' property
		if length is specified as 0, the stream will be written without a length specifier, to allow devs to do fun stuff
		be aware, some malicious endpoints will try to overload the length of a stream to cause buffer overruns 
			1) Don't rely on length parameter for buffer sizes without validity checks 2) Don't execute recieved data!
	if there is already a stream sending, this stream will be queued</Abstract>
			<DeclaredIn>swypConnectionSession.h</DeclaredIn>			
			
			<Declaration>- (swypConcatenatedInputStream *)beginSendingFileStreamWithTag:(NSString *)tag type:(NSString *)fileType dataStreamForSend:(NSInputStream *)stream length:(NSUInteger)streamLength</Declaration>
			<Parameters>
				<Parameter>
					<Name>length</Name>
					<Abstract type="html">the length of the 'stream' property
		if length is specified as 0, the stream will be written without a length specifier, to allow devs to do fun stuff
		be aware, some malicious endpoints will try to overload the length of a stream to cause buffer overruns 
			1) Don't rely on length parameter for buffer sizes without validity checks 2) Don't execute recieved data!
	if there is already a stream sending, this stream will be queued</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/beginSendingFileStreamWithTag:type:dataStreamForSend:length:</Anchor>
		</Token>
		
	</File>
</Tokens>