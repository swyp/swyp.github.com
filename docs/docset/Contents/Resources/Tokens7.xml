<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/swypPendingConnectionManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/swypPendingConnectionManager</TokenIdentifier>
			<Abstract type="html">This class is key in managing the prioritization of connection accross multiple interfaces.
It communicates directly with swypConnectionManager to ensure priorities are kept.
Prioritization occurs through the comparative value of each swypConnectionMethod</Abstract>
			<DeclaredIn>swypPendingConnectionManager.h</DeclaredIn>
			
			<NodeRef refid="7"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/swypPendingConnectionManager/setSwypOutPending:forConnectionMethods:</TokenIdentifier>
			<Abstract type="html">After swypConnnectionManager posts swypInfoRef to an interface, it sets it as pending here</Abstract>
			<DeclaredIn>swypPendingConnectionManager.h</DeclaredIn>			
			
			<Declaration>- (void)setSwypOutPending:(swypInfoRef *)swypRef forConnectionMethods:(swypConnectionMethod)methods</Declaration>
			
			
			<Anchor>//api/name/setSwypOutPending:forConnectionMethods:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/swypPendingConnectionManager/connectionMethodTimedOut:forSwypRef:</TokenIdentifier>
			<Abstract type="html">This tells the manager that an interface method will no longer send new candidates
This allows the manager to clear out deadspace and proceed to call swypPendingConnectionManagerHasAvailableHandshakeableConnectionSessionsForSwyp:</Abstract>
			<DeclaredIn>swypPendingConnectionManager.h</DeclaredIn>			
			
			<Declaration>- (void)connectionMethodTimedOut:(swypConnectionMethod)method forSwypRef:(swypInfoRef *)swypRef</Declaration>
			
			
			<Anchor>//api/name/connectionMethodTimedOut:forSwypRef:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/swypPendingConnectionManager/clearAllPendingConnectionsForSwypRef:</TokenIdentifier>
			<Abstract type="html">After swypConnnectionManager has found its match for a swypCandidate, it acts responsibly by calling this method</Abstract>
			<DeclaredIn>swypPendingConnectionManager.h</DeclaredIn>			
			
			<Declaration>- (void)clearAllPendingConnectionsForSwypRef:(swypInfoRef *)ref</Declaration>
			
			
			<Anchor>//api/name/clearAllPendingConnectionsForSwypRef:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/swypPendingConnectionManager/addSwypClientCandidate:forSwypRef:forConnectionMethod:</TokenIdentifier>
			<Abstract type="html">After a swypConnectionMethod has returned a swypCandidate to swypConnnectionManager, swypConnnectionManager calls this method to add it to the queue for a specific swypInfoRef.</Abstract>
			<DeclaredIn>swypPendingConnectionManager.h</DeclaredIn>			
			
			<Declaration>- (void)addSwypClientCandidate:(swypClientCandidate *)candidate forSwypRef:(swypInfoRef *)ref forConnectionMethod:(swypConnectionMethod)method</Declaration>
			
			
			<Anchor>//api/name/addSwypClientCandidate:forSwypRef:forConnectionMethod:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/swypPendingConnectionManager/nextConnectionSessionToAttemptHandshakeForSwypRef:</TokenIdentifier>
			<Abstract type="html">This method is called by swypConnnectionManager after the delegate protocol swypPendingConnectionManagerHasAvailableHandshakeableConnectionSessionsForSwyp: is called</Abstract>
			<DeclaredIn>swypPendingConnectionManager.h</DeclaredIn>			
			
			<Declaration>- (swypConnectionSession *)nextConnectionSessionToAttemptHandshakeForSwypRef:(swypInfoRef *)ref</Declaration>
			
			
			<Anchor>//api/name/nextConnectionSessionToAttemptHandshakeForSwypRef:</Anchor>
		</Token>
		
	</File>
</Tokens>